{
  "Commands": [
    {
      "Name": "Align Array to Right",
      "Description": "Aligns array to the right with blanks to left",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "ar"
      ],
      "Formula": "=RightAlignedArray_byJaqKennedy(IFBLANK([[ActiveCell::Formula]],\"\"))",
      "Tags": [
        "WrapWith"
      ],
      "FormulaDependencies": [
        "RightAlignedArray_byJaqKennedy.lambda",
        "IFBLANK.lambda"
      ]
    },
    {
      "Name": "Backup Sheets in Workbook",
      "Description": "Copy all sheets in workbook for backup",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "BU"
      ],
      "MacroExpression": "modCaseSetup.Backup()",
      "Tags": [
        "Prep"
      ],
      "MacroWorkbookConnection": "ThisWorkbook"
    },
    {
      "Name": "Clear Lambdas",
      "Description": "Clear lambdas that aren't in Lambdas table - for Comp Bot maintenance",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "CL"
      ],
      "MacroExpression": "modLambdas.ClearLambdas()",
      "Tags": [
        "Maintenance"
      ]
    },
    {
      "Name": "Create Blank Sheet",
      "Description": "Creates a blank sheet named based on cell value (Sht otherwise)",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "BS",
        "CBS",
        "S"
      ],
      "MacroExpression": "modMisc.CreateBlankSheet([[ActiveCell]])",
      "Tags": [
        "Prep"
      ],
      "MacroWorkbookConnection": "ThisWorkbook"
    },
    {
      "Name": "Create Bonus Sheet",
      "Description": "Creates bonus sheet \"B\" with bonus questions",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "CB",
        "CBS"
      ],
      "MacroExpression": "modCaseSetup.CreateBonusSheet()",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Create Case Inputs Sheet",
      "Description": "Creates a case inputs sheet with the inputs for the current case",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "CIS",
        "IS"
      ],
      "MacroExpression": "modCaseSetup.CreateCaseInputsSheet([[ActiveCell]])",
      "Tags": [
        "Prep"
      ],
      "MacroWorkbookConnection": "ThisWorkbook"
    },
    {
      "Name": "Create Data Table",
      "Description": "Creates a data table on the current sheet for level sheets \"L#\" or active cell = \"Example#\"",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "CDT",
        "DT"
      ],
      "MacroExpression": "modCaseSetup.CreateDataTable([[NewTableTargetToRight]])",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Create Level Sheets",
      "Description": "Creates a sheet for each level in the Case sheet",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "CL",
        "CLS"
      ],
      "MacroExpression": "modCaseSetup.CreateLevelSheets()",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Default Settings",
      "Description": "Updates default settings to those in Default Settings sheet",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "DS"
      ],
      "MacroExpression": "modMisc.DefaultSettings()",
      "Tags": [
        "Settings"
      ]
    },
    {
      "Name": "Difference of Array Columns by Row",
      "Description": "Returns first column - last column in array",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "diff",
        "dbr"
      ],
      "Formula": "=DiffByRow_byJaqKennedy([[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ],
      "FormulaDependencies": [
        "DiffByRow_byJaqKennedy.lambda"
      ]
    },
    {
      "Name": "Eggy",
      "Description": "Easter Egg Fun",
      "Type": "VBAMacroCommand",
      "MacroExpression": "modUtilities.Eggy()"
    },
    {
      "Name": "Find Above In Left",
      "Description": "Find above value(s) in left value(s).",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "fal"
      ],
      "Formula": "=1-ISERROR(FIND([[ActiveCell.Offset(-1,0).SpillParent.SpillingToRange]],[[ActiveCell.Offset(0,-1).SpillParent.SpillingToRange]]))",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Full Setup Case",
      "Description": "Setup case by running Backup and Level sheet creation",
      "Type": "VBAMacroCommand",
      "ShortCutSendKeyString": "^+g",
      "CommandAfter": "Import Lambda Library",
      "LaunchCodes": [
        "SC"
      ],
      "MacroExpression": "modCaseSetup.Setup()",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Goto Similar Background Color",
      "Description": "Goto similar background color.",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "SBC"
      ],
      "MacroExpression": "modGoToSpecial.GotoSimilarBackgroundColor()",
      "Tags": [
        "GoTo"
      ]
    },
    {
      "Name": "Import Lambda Library",
      "Description": "Imports CompBot's lambda collection into active workbook",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "IL"
      ],
      "MacroExpression": "modImportLambdas.ImportAllLambdas(\"CompBot.xlsm\")",
      "Tags": [
        "LAMBDA",
        "Prep"
      ],
      "MacroWorkbookConnection": "Lambda Robot"
    },
    {
      "Name": "Import Lambdas From",
      "Description": "Import lambdas from a specified workbook",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "ILF"
      ],
      "MacroExpression": "modLambdas.ImportLambdasFrom()",
      "Tags": [
        "LAMBDA",
        "Prep"
      ]
    },
    {
      "Name": "Keep Cell of Array",
      "Description": "Keep selected cell of array.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "KTC"
      ],
      "Formula": "=CHOOSEROWS(CHOOSECOLS([[ActiveCell.SpillParent::Formula]],{{Selected_Column_Indexes_In_Spilling_Range}}),{{Selected_Row_Indexes_In_Spilling_Range}})",
      "DestinationRangeAddress": "[[ActiveCell.SpillParent]]",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Lookup Value by Row",
      "Description": "Returns RC location of a list of values in a range",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "lkp"
      ],
      "Formula": "=LkpRCByRow([[ActiveCell::Formula]], [[Clipboard::Address]])",
      "Tags": [
        "WrapWith"
      ],
      "FormulaDependencies": [
        "LkpRCByRow.lambda",
        "BiRow_byPeterBartholomew.lambda",
        "LkpRC.lambda",
        "FilterArray_byErikOehm.lambda",
        "IsInList_byErikOehm.lambda",
        "GRIDTOCOL_byLiannaGerrish.lambda",
        "ADDRESSES_byDiarmuidEarly.lambda"
      ]
    },
    {
      "Name": "Name All Used Ranges",
      "Description": "Renames used range in all sheets",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "NA",
        "NAUR"
      ],
      "MacroExpression": "modNames.NameAllUsedRanges()",
      "Tags": [
        "Name"
      ]
    },
    {
      "Name": "Name Used Ranges",
      "Description": "Names used range in all sheets starting with the prefix as provided in the active cell",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "NURS"
      ],
      "MacroExpression": "modNames.NameUsedRanges([[ActiveCell]])",
      "Tags": [
        "Name"
      ]
    },
    {
      "Name": "Negative Values",
      "Description": "Negative values. with errors as blank",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "neg"
      ],
      "Formula": "=IFERROR(-([[ActiveCell::Formula]]),\"\")",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Rename Sheets",
      "Description": "Rename multi-word sheet names",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "rs"
      ],
      "MacroExpression": "modCaseSetup.RenameSht()",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Save Answers To Left",
      "Description": "Saves references to the selected cells in the green answer cells to the left on the same row.",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "SAL"
      ],
      "MacroExpression": "modCaseSetup.SaveAnswersToLeft()",
      "Tags": [
        "Paste"
      ]
    },
    {
      "Name": "Save Copy of File",
      "Description": "Enable editing and save copy of file with suffix based on active cell (otherwise Working)",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "SA"
      ],
      "MacroExpression": "modCaseSetup.SaveCopy([[ActiveCell]])",
      "Tags": [
        "Prep"
      ]
    },
    {
      "Name": "Sequence of Row Count",
      "Description": "Sequence of row count of array variable",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "src"
      ],
      "Formula": "=SEQUENCE(ROWS([[ActiveCell::Formula]]),1,1,1)",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Split Text by Delimiter Above",
      "Description": "Split text by delimiter in the cell above and trim output.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "ST"
      ],
      "Formula": "=TRIM(TEXTSPLIT([[ActiveCell::Formula]],,[[ActiveCell.Offset(-1,0)]],TRUE))",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Substitute Blank for 0",
      "Description": "Substitute blank values for 0",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "sb0"
      ],
      "Formula": "=SUBSTITUTE([[ActiveCell::Formula]],\"\",0)",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Substitute Blank for 1",
      "Description": "Substitute blank cells for 1",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "sb1"
      ],
      "Formula": "=SUBSTITUTE([[ActiveCell::Formula]],\"\",1)",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Toggle Calculation Mode",
      "Description": "Toggles calculation mode and places current mode notice in StatusBar",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "TC"
      ],
      "MacroExpression": "modMisc.ToggleCalculationMode()",
      "Tags": [
        "Settings"
      ]
    },
    {
      "Name": "Toggle Iterative Calculation",
      "Description": "Toggles iterative calculation and sets status in status bar",
      "Type": "VBAMacroCommand",
      "LaunchCodes": [
        "IC"
      ],
      "MacroExpression": "modMisc.ToggleIterativeCalculation()",
      "Tags": [
        "Settings"
      ]
    },
    {
      "Name": "Wrap in ABS",
      "Description": "Wrap in abs.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "ABS"
      ],
      "Formula": "=ABS([[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in Concat",
      "Description": "Wrap in concat.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "con"
      ],
      "Formula": "=CONCAT([[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in Drop First Row",
      "Description": "Wrap in drop first row",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "DF"
      ],
      "Formula": "=DROP([[ActiveCell::Formula]],1)",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in IFERROR with space",
      "Description": "Wrap in iferror.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "err"
      ],
      "Formula": "=IFERROR([[ActiveCell::Formula]],\" \")",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in Take by Copied Cell Columns",
      "Description": "Wrap in take by copied cell columns.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "TCC"
      ],
      "Formula": "=TAKE([[ActiveCell::Formula]],,[[Clipboard]])",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in UNICHAR",
      "Description": "Wrap in unichar.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "char"
      ],
      "Formula": "=UNICHAR([[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap in UNICODE",
      "Description": "Wrap in unicode.",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "code"
      ],
      "Formula": "=UNICODE([[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ]
    },
    {
      "Name": "Wrap with IFERROR TEXTBEFORE space",
      "Description": "Wraps current formula with TEXTBEFORE space with IFERROR in case space doesn't exist",
      "Type": "ExcelFormulaCommand",
      "LaunchCodes": [
        "tbse"
      ],
      "Formula": "=IFERROR(TEXTBEFORE([[ActiveCell::Formula]],\" \"),[[ActiveCell::Formula]])",
      "Tags": [
        "WrapWith"
      ]
    }
  ]
}